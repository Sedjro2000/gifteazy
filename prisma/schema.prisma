// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  sessions  Session[]
  lists     List[]
  donations Order[]
  merchant  Merchant? 

  Cart Cart[]
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  provider          String
  providerAccountId String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expired      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Merchant {
  id                       String         @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String         @unique @db.ObjectId 
  storeName                String         @unique
  address                  String?       
  phoneNumber              String?        
  status                   MerchantStatus  @default(PENDING) 
  taxIdentificationNumber  String?       
  user                     User           @relation(fields: [userId], references: [id])
  products                 Product[]
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
}


model Product {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  merchantId  String         @db.ObjectId
  name        String
  description String
  price       Float
  imageUrl    String
  stock       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  merchant          Merchant          @relation(fields: [merchantId], references: [id])
  listItems         ListItem[]
  productCategories ProductCategory[]
  filters           ProductFilter[]   

  CartItem CartItem[]
}

model Category {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String           @unique
  description     String?
  parentId        String ?          @db.ObjectId
  parent          Category?        @relation(name: "ParentCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children        Category[]       @relation(name: "ParentCategory")
  productCategories ProductCategory[]
  filters         Filter[]   
  createdAt       DateTime        @default(now())
  updatedAt       DateTime         @updatedAt     
}

model ProductCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId

  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([productId, categoryId])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Filter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // Nom du filtre, ex : "Taille", "Couleur", etc.
  type        String   // Type de filtre, ex : "text", "select", "range", etc.
  values      String[] // Valeurs possibles pour le filtre, ex : ["S", "M", "L"] pour "Taille"
  categoryId  String   @db.ObjectId // Référence à la catégorie
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ProductFilter ProductFilter[]
}

model ProductFilter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId // ID du produit
  filterId    String   @db.ObjectId // ID du filtre appliqué
  value       String   // Valeur choisie pour le filtre
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product     Product  @relation(fields: [productId], references: [id])
  filter      Filter   @relation(fields: [filterId], references: [id])

  @@unique([productId, filterId])
}

model List {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isShared  Boolean  @default(false)
  shareUrl  String?
  user      User       @relation(fields: [userId], references: [id])
  listItems ListItem[]
}

model ListItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  listId    String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  isGifted  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list           List            @relation(fields: [listId], references: [id])
  product        Product         @relation(fields: [productId], references: [id])
  orderListItems OrderListItem[] 
}

model Order {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  donatorId      String         @db.ObjectId
  amount         Float
  paymentStatus  PaymentStatus
  deliveryStatus DeliveryStatus
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  donator        User            @relation(fields: [donatorId], references: [id])
  orderListItems OrderListItem[] 
}

model OrderListItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String @db.ObjectId
  listItemId String @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order    @relation(fields: [orderId], references: [id])
  listItem   ListItem @relation(fields: [listItemId], references: [id])
}

model Cart {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  items      CartItem[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String    @db.ObjectId
  productId String    @db.ObjectId
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  cart      Cart      @relation(fields: [cartId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
    
  @@unique([cartId, productId])
}


enum Role {
  ADMIN
  MERCHANT
  CLIENT
  DONATEUR
  USER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  DELIVERED
}
enum MerchantStatus {
  PENDING   
  APPROVED  
  REJECTED  
}

