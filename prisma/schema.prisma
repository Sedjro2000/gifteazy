// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  accounts  Account[]
  sessions  Session[]
  lists     List[]
  donations Order[]
  merchant  Merchant? 
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  provider          String
  providerAccountId String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expired      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Merchant {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @unique @db.ObjectId 
  storeName String @unique
  user     User      @relation(fields: [userId], references: [id])
  products Product[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  merchantId  String   @db.ObjectId
  name        String
  description String
  price       Float
  imageUrl    String
  stock       Int
  createdAt   DateTime @default(now())

  merchant  Merchant   @relation(fields: [merchantId], references: [id])
  listItems ListItem[]
}

model List {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  isShared  Boolean  @default(false)
  shareUrl  String?
  user      User       @relation(fields: [userId], references: [id])
  listItems ListItem[]
}

model ListItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  listId    String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  isGifted  Boolean @default(false)
  list           List            @relation(fields: [listId], references: [id])
  product        Product         @relation(fields: [productId], references: [id])
  orderListItems OrderListItem[] 
}

model Order {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  donatorId      String         @db.ObjectId
  amount         Float
  paymentStatus  PaymentStatus
  deliveryStatus DeliveryStatus
  createdAt      DateTime       @default(now())
  donator        User            @relation(fields: [donatorId], references: [id])
  orderListItems OrderListItem[] 
}
model OrderListItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String @db.ObjectId
  listItemId String @db.ObjectId
  order    Order    @relation(fields: [orderId], references: [id])
  listItem ListItem @relation(fields: [listItemId], references: [id])
}

enum Role {
  ADMIN
  MERCHANT
  CLIENT
  DONATEUR
  USER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  DELIVERED
}
